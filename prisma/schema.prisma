// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ARTIST
  USER
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  firstname     String?
  lastname      String?
  name          String?        @unique
  emailVerified Boolean
  role          Role           @default(USER)
  image         String?
  bannerImage   String?
  bio           String?
  location      String?
  website       String?
  onBoarded     Boolean        @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  artworks      Artwork[]
  collections   Collection[]
  inspirations  Inspiration[]
  posts         Post[]
  PostReaction  PostReaction[]
  answers       Answer[]
  user_template UserTemplate[]
  following     Follow[]       @relation("Following")
  followers     Follow[]       @relation("Followers")

  @@map("user")
}

model Template {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user_template UserTemplate[]
}

model UserTemplate {
  id         Int      @id @default(autoincrement())
  userId     String
  templateId Int
  active     Boolean  @default(false)
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model Artwork {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  isForSale   Boolean
  price       Int?
  sold        Boolean  @default(false)
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  collections  Collection[]
  inspirations Inspiration[]
  posts        Post[]
}

model Collection {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworks Artwork[]
}

model Inspiration {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String? // nullable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  artworks Artwork[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Question {
  id       Int      @id @default(autoincrement())
  question String
  answers  Answer[]
  post     Post     @relation(fields: [postId], references: [id])
  postId   Int      @unique
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  questionId Int
  votes      Int      @default(0)
  users      User[]
  question   Question @relation(fields: [questionId], references: [id])
}

model Post {
  id           Int            @id @default(autoincrement())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  content      String
  createdAt    DateTime
  updatedAt    DateTime       @updatedAt
  question     Question?
  PostReaction PostReaction[]
  artworks     Artwork[]
}

model Reaction {
  id           Int            @id @default(autoincrement())
  image        String
  PostReaction PostReaction[]
}

model PostReaction {
  id         Int    @id @default(autoincrement())
  userId     String
  postId     Int
  reactionId Int

  user     User     @relation(fields: [userId], references: [id])
  post     Post     @relation(fields: [postId], references: [id])
  reaction Reaction @relation(fields: [reactionId], references: [id])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}
