// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ARTIST
  USER
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  firstname     String?
  lastname      String?
  name          String?
  emailVerified Boolean
  role          Role           @default(USER)
  image         String?
  onBoarded     Boolean        @default(false)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Artwork       Artwork[]
  Group         Group[]
  UserTemplate  UserTemplate[]
  Inspiration   Inspiration[]

  @@map("user")
}

model Artwork {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  isForSale   Boolean
  price       Int?
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  GroupArtwork       GroupArtwork[]
  InspirationArtwork InspirationArtwork[]
}

model Group {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  GroupArtwork GroupArtwork[]
}

model GroupArtwork {
  id        Int      @id @default(autoincrement())
  groupId   Int
  artworkId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  artwork Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([groupId, artworkId])
}

model Template {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String?
  slug         String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserTemplate UserTemplate[]
}

model UserTemplate {
  id         Int      @id @default(autoincrement())
  userId     String
  templateId Int
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
}

model Inspiration {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String? // nullable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  InspirationArtwork InspirationArtwork[]
}

model InspirationArtwork {
  id            Int      @id @default(autoincrement())
  inspirationId Int
  artworkId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inspiration Inspiration @relation(fields: [inspirationId], references: [id], onDelete: Cascade)
  artwork     Artwork     @relation(fields: [artworkId], references: [id], onDelete: Cascade)

  @@unique([inspirationId, artworkId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
